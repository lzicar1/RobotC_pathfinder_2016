#pragma config(Sensor, S2,     ,               sensorEV3_Gyro, modeEV3Gyro_RateAndAngle)
#pragma config(Sensor, S3,     ,               sensorEV3_Color)
#pragma config(Sensor, S4,     ,               sensorEV3_Ultrasonic)
#pragma config(Motor,  motorA,          pravy,         tmotorEV3_Large, PIDControl, encoder)
#pragma config(Motor,  motorB,          levy,          tmotorEV3_Large, PIDControl, encoder)
#pragma config(Motor,  motorC,          madlo,         tmotorEV3_Medium, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#define K_PREVODU -40/24
#define POCETMERENILS 100

//okenko pro globalni promenne
int min = 100; int max = 0;

void kalibrace_light()
{
	displayTextLine(2, "KALIBRACE LS");
	displayTextLine(4, "Pro spusteni zmacknete enter");
	waitForButtonPress();
	eraseDisplay();

	setMotorTarget(motorC, 60 * K_PREVODU, 10);
  if(getMotorEncoder(motorC) >= 59)
  	{
  		setMotorTarget(motorC, 0, 10);
  	}

	float hodnoty[POCETMERENILS];

	if(getMotorMoving(motorC) == 1)
	{
		for(int i; i<POCETMERENILS; i++)
		{
			hodnoty[i] = getColorAmbient(S3);
			
			if(hodnoty[i] < min)
			{
			min = hodnoty[i];
			}
		
			if(hodnoty[i] > max)
			{
			max = hodnoty[i];
			}
	
			sleep(10);
		}
	}

	displayCenteredTextLine(2, "KALIBRACE LS");
	displayTextLine(4, "Cerna: %d", min);
	displayTextLine(5, "Bila: %d", max);
	waitForButtonPress();
	eraseDisplay();
}



task main()
{
 kalibrace_light();	
 
 while(1)
 {
   sleep(5);
 }
}
