#pragma config(StandardModel, "EV3_REMBOT")
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma DebuggerWindows("debugStream");

#define SIRKA_ROBOTA 15 //Dopln
#define D_KOL 5.6 //(prumer v centimetrech) //Dopln
#define DOCASNY_ELEMENT 1

#define POZADI 0 
#define CARA 100
#define ROZLISENI_BARVY 15

#define ZAKLAD 30

#define KP 2
#define KI 0
#define KD 0

#define K1 0.5 //korekce uhlu madla
#define K2 1 //korekce rychlosti kol podle uhlu madla

//madlo = motorC
//levymotor = motorA
//pravymotor = motorB
//senzor odrazeneho svetla = S3


float delka_jednoho_stupne = (PI * D_KOL)/360;
float hrana = (CARA + POZADI)/2;


void preambule()
{
   clearTimer(T1);
   resetAllSensorAutoID();
   clearDebugStream();

   resetMotorEncoder(motorA);
   resetMotorEncoder(motorB);
   resetMotorEncoder(motorC);

   writeDebugStreamLine("cas_sec, draha_robota, uhelRobota, odometrie_uhelrobota, X_souradnice, Y_souradnice");
}


// data ze senzoru zprumerovana odhadem plovouciho prumeru s exponencialnim zapominanim... for fun
   float hsenzoru_avg = 0;

float hsenzoru_avg(int K_AVG)
{
   int hsenzoru = getColorReflected(S3);
   hsenzoru_avg = hsenzoru_avg + 1/K_AVG * (hsenzoru - hsenzoru_avg);

return hsenzoru_avg;
}


task sledovanicary()
{

   setMotorTarget(motorC, -60, 50); //otoc madlo o -60° rychlosti 50%

   repeatUntil(getColorReflected(S3) < hrana + ROZLISENI_BARVY) //pockej dokud nenarazis na pravou hranu
   {
      sleep(1);
   }

   while (1)
   {
      //PID
      float odchylka = hrana - hsenzoru_avg(3);
      float derivativ = odchylka - posledniodchylka;
      float integral = integral + hsenzoru
      float rychlost_pid = odchylka * KP + integral * KI + derivativ * KD;

      //madlo by mělo sledovat caru
      setMotorSpeed(motorC, rychlost_pid);
      float uhelmadla = getMotorEncoder(motorC);

      setMotorSpeed(motorA, ZAKLAD + uhelmadla * K2);
      setMotorSpeed(motorB, ZAKLAD - uhelmadla * K2);

      sleep(5);




      float posledniodchylka = odchylka;
   }
}



task main()
{
	preambule(); sleep(20);
   hledejcaru();

   startTask(sledujcaru);

   pohyb();

   stopAllTasks();

}
